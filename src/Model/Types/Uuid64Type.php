<?php
declare(strict_types=1);
/**
 * Contains class Uuid64Type.
 *
 * PHP version 7.3
 *
 * LICENSE:
 * This file is part of person_db_skeleton which is a set of skeleton database
 * tables for people and common associated data.
 * Copyright (C) 2019 Michael Cummings
 *
 * This program is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation, version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see
 * <http://spdx.org/licenses/GPL-2.0.html>.
 *
 * You should be able to find a copy of this license in the LICENSE file.
 *
 * @author    Michael Cummings <mgcummings@yahoo.com>
 * @copyright 2019 Michael Cummings
 * @license   GPL-2.0
 */

namespace PersonDBSkeleton\Model\Types;

use Doctrine\DBAL\DBALException;
use Doctrine\DBAL\Platforms\AbstractPlatform;
use Doctrine\DBAL\Types\BinaryType;
use PersonDBSkeleton\Utils\Uuid4;

/**
 * Custom doctrine UUID v4 (random) datatype using custom base 64 encoding.
 */
class Uuid64Type extends BinaryType {
    use Uuid4;
    public const UUID64 = 'uuid64';
    public function __toString() {
        return parent::__toString(); // TODO: Change the autogenerated stub
    }
    /**
     * Converts a value from its PHP representation to its database representation
     * of this type.
     *
     * @param mixed            $value    The value to convert.
     * @param AbstractPlatform $platform The currently used database platform.
     *
     * @return mixed The database representation of the value.
     */
    public function convertToDatabaseValue($value, AbstractPlatform $platform) {
        return (string)$value;
    }
    /**
     * Converts a value from its database representation to its PHP representation
     * of this type.
     *
     * @param mixed            $value    The value to convert.
     * @param AbstractPlatform $platform The currently used database platform.
     *
     * @return mixed The PHP representation of the value.
     */
    public function convertToPHPValue($value, AbstractPlatform $platform) {
        if (null === $value) {
            return null;
        }
        return (string)$value;
    }
    /**
     * Gets the name of this type.
     *
     * This is the name you will need in Doctrine ORM to use the type.
     *
     * @return string
     */
    public function getName(): string {
        return self::UUID64;
    }
    /**
     * {@inheritdoc}
     * @throws DBALException
     */
    public function getSQLDeclaration(array $fieldDeclaration, AbstractPlatform $platform): string {
        $dec = \array_merge($fieldDeclaration, ['length' => 22, 'fixed' => true]);
        return parent::getSQLDeclaration($dec, $platform);
    }
    /**
     * Force SQL comment containing DC2Type so Doctrine reverse engineering works correctly.
     *
     * @param AbstractPlatform $platform
     *
     * @return bool
     */
    public function requiresSQLCommentHint(AbstractPlatform $platform): bool {
        return true;
    }
}
