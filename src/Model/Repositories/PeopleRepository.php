<?php
declare(strict_types=1);
/**
 *
 * PHP version 7.3
 *
 * LICENSE:
 * This file is part of person_db_skeleton which is a set of skeleton database
 * tables for people and common associated data.
 *
 * Copyright (C) 2019 Michael Cummings. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * You should have received a copy of the BSD-3 Clause License along with
 * this program. If not, see
 * <https://spdx.org/licenses/BSD-3-Clause.html>.
 *
 * You should be able to find a copy of this license in the LICENSE file.
 *
 * @author    Michael Cummings <mgcummings@yahoo.com>
 * @copyright 2019 Michael Cummings
 * @license   BSD-3-Clause
 */

namespace PersonDBSkeleton\Model\Repositories;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\OptimisticLockException;
use Doctrine\ORM\ORMException;
use Doctrine\ORM\Query\Expr;
use PersonDBSkeleton\Model\Entities\Addresses;
use PersonDBSkeleton\Model\Entities\AddressTypes;
use PersonDBSkeleton\Model\Entities\Emails;
use PersonDBSkeleton\Model\Entities\EmailTypes;
use PersonDBSkeleton\Model\Entities\People;
use PersonDBSkeleton\Model\Entities\PeopleAddresses;
use PersonDBSkeleton\Model\Entities\PeopleEmails;
use PersonDBSkeleton\Model\Entities\PeoplePhoneNumbers;
use PersonDBSkeleton\Model\Entities\PhoneNumbers;
use PersonDBSkeleton\Model\Entities\PhoneTypes;

/**
 * People
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PeopleRepository extends EntityRepository {
    use ArrayExceptionCommon;
    /**
     * @param People       $person
     * @param Addresses    $address
     * @param AddressTypes $type
     *
     * @return PeopleAddresses
     * @throws ORMException
     * @throws OptimisticLockException
     * @throws \Exception
     */
    public function addAddress(People $person, Addresses $address, AddressTypes $type): PeopleAddresses {
        $em = $this->getEntityManager();
        $em->persist($person);
        $em->persist($address);
        $em->persist($type);
        // Needed to insure the above instances have IDs.
        $em->flush();
        $pa = $this->findOnePeopleAddressBy($person, $address, $type) ?? new PeopleAddresses($person, $address, $type);
        $person->getAddresses()
               ->add($pa);
        $em->persist($pa);
        return $pa;
    }
    /**
     * @param People     $person
     * @param Emails     $email
     * @param EmailTypes $type
     *
     * @return PeopleEmails
     * @throws ORMException
     * @throws OptimisticLockException
     * @throws \Exception
     */
    public function addEmail(People $person, Emails $email, EmailTypes $type): PeopleEmails {
        $em = $this->getEntityManager();
        $em->persist($person);
        $em->persist($email);
        $em->persist($type);
        // Needed to insure the above instances have IDs.
        $em->flush();
        $pe = $this->findOnePeopleEmailBy($person, $email, $type) ?? new PeopleEmails($person, $email, $type);
        $person->getEmails()
               ->add($pe);
        return $pe;
    }
    /**
     * @param People       $person
     * @param PhoneNumbers $phone
     * @param PhoneTypes   $type
     *
     * @return PeoplePhoneNumbers
     * @throws ORMException
     * @throws OptimisticLockException
     * @throws \Exception
     */
    public function addPhone(People $person, PhoneNumbers $phone, PhoneTypes $type): PeoplePhoneNumbers {
        $em = $this->getEntityManager();
        $em->persist($person);
        $em->persist($phone);
        $em->persist($type);
        // Needed to insure the above instances have IDs.
        $em->flush();
        $pp = $this->findOnePeoplePhoneNumberBy($person, $phone, $type) ?? new PeoplePhoneNumbers(
                $person, $phone, $type
            );
        $person->getPhoneNumbers()
               ->add($pp);
        $em->persist($pp);
        return $pp;
    }
    /**
     * @param string $name
     *
     * @return array
     */
    public function browseByName(string $name): array {
        $expr = new Expr();
        $query = $this->createQueryBuilder('p')
                      ->select('p')
                      ->where($expr->like('p.givenName', "'%:name%'"))
                      ->orWhere($expr->like('p.familyName', "'%:name%'"))
                      ->orWhere($expr->like('p.additionalName', "'%:name%'"))
                      ->setParameter('name', $name)
                      ->getQuery();
        return $query->getResult();
    }
    /**
     * @param People       $person
     * @param Addresses    $address
     * @param AddressTypes $type
     *
     * @return PeopleAddresses|null
     */
    public function findOnePeopleAddressBy(People $person, Addresses $address, AddressTypes $type): ?PeopleAddresses {
        /** @var PeopleAddresses $result */
        $result = $this->getEntityManager()
                       ->getRepository(PeopleAddresses::class)
                       ->findOneBy(
                           [
                               'person' => $person->getId(),
                               'address' => $address->getId(),
                               'type' => $type->getId(),
                           ]
                       );
        return $result;
    }
    /**
     * @param People     $person
     * @param Emails     $email
     * @param EmailTypes $type
     *
     * @return PeopleEmails|null
     */
    public function findOnePeopleEmailBy(People $person, Emails $email, EmailTypes $type): ?PeopleEmails {
        /** @var PeopleEmails $result */
        $result = $this->getEntityManager()
                       ->getRepository(PeopleEmails::class)
                       ->findOneBy(
                           [
                               'person' => $person->getId(),
                               'email' => $email->getId(),
                               'type' => $type->getId(),
                           ]
                       );
        return $result;
    }
    /**
     * @param People       $person
     * @param PhoneNumbers $phone
     * @param PhoneTypes   $type
     *
     * @return PeoplePhoneNumbers|null
     */
    public function findOnePeoplePhoneNumberBy(
        People $person,
        PhoneNumbers $phone,
        PhoneTypes $type
    ): ?PeoplePhoneNumbers {
        /** @var PeoplePhoneNumbers $result */
        $result = $this->getEntityManager()
                       ->getRepository(PeoplePhoneNumbers::class)
                       ->findOneBy(
                           [
                               'person' => $person->getId(),
                               'phone' => $phone->getId(),
                               'type' => $type->getId(),
                           ]
                       );
        return $result;
    }
}
